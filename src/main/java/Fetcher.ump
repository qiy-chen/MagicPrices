namespace com.MagicPrices.model;
class FetcherSystem
{
	depend java.time.LocalDateTime;
    autounique id;
  LocalDateTime currentDate=LocalDateTime.now();
  1 <@>- 0..1 MainMenu;
  1 <@>- * Fetcher;
  1 <@>- * Card;
  1 <@>- * Reader;
  1 <@>- * Price;
  1 <@>- 0..1 CardDatabase;
    public LocalDateTime updateCurrentDate()
  {
  	currentDate=LocalDateTime.now();
    return currentDate;
  }
}

class MainMenu
{
depend java.time.LocalDateTime;
  autounique mainId;
     dataPath="./";
   1-- 0..1 Reader;
   
}

external interface Comparable{}

class Card
{
depend java.time.LocalDateTime;
  isA Comparable;
  String cardId;
    name;
category;
1 -- * Price;
    * -- 1 CardDatabase;
  0..1 -- 0..1 Fetcher;
public boolean setCardId(String aCardName, String aCategory){
    boolean wasSet = false;
    cardId = Card.convertToCardId(aCardName, aCategory);
    wasSet = true;
    return wasSet;
  }
  
  public static String convertToCardId(String aCardName, String aCategory){
  	return aCardName.toLowerCase().replaceAll(" ","")+"|"+aCategory.toLowerCase().replaceAll(" ","");
  }
  
  	@Override
	public int compareTo(Card c) {
		return this.cardId.compareTo(c.getCardId());
	}
  
}

class Fetcher
{
depend java.time.LocalDateTime;
depend com.MagicPrices.controller.CardDatabaseController;
depend java.util.ArrayList;
depend java.util.List;
depend java.util.concurrent.TimeUnit;
depend org.openqa.selenium.By;
depend org.openqa.selenium.WebDriver;
depend org.openqa.selenium.WebElement;
depend org.openqa.selenium.safari.SafariDriver;
  
  autounique fetcherId;
  LocalDateTime fetchDate;
  url;
  double conversionRateUSDToCAD;
 0..1 -- 1 MainMenu;
 
 
     public boolean fetchAll(){
    boolean success = false;
    WebDriver driver = null;

    try {
      driver = new SafariDriver();
      //driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
      driver.get(url);
      try {
        TimeUnit.SECONDS.sleep(3);
      } catch (InterruptedException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
      }

      //Extract information
      //System.out.println(driver.getPageSource());
      List<WebElement> ListOfCards = driver.findElements(By.xpath("//div[@class='hawk-results__item']"));

      for (WebElement card: ListOfCards) {
        System.out.println("Found a card! Now analyzing it");
        //System.out.println(card.getText());
        String cardName;
        String cardSet;
        double concurrentPrice=0;
        String condition;
        String foiling;
        int amountInStock = 0;
        WebElement cardNameHTML = card.findElement(By.className("hawk-results__hawk-contentTitle"));
        cardName = cardNameHTML.getText().trim();
        WebElement cardSetHTML = card.findElement(By.className("hawk-results__hawk-contentSubtitle"));
        cardSet = cardSetHTML.getText().trim();

        Card existingCard = CardDatabaseController.findCardById(Card.convertToCardId(cardName, cardSet));
        if (existingCard ==null) {
          existingCard = new Card(Card.convertToCardId(cardName, cardSet), cardName, cardSet, cardDatabase, fetcherSystem);
        }
        //Special case if the card is unique (scan)
        if (cardName.contains(" - Scan")){
          condition = "Scan";
          foiling = "Scan";
          amountInStock = Integer.parseInt(card.findElement(By.className("hawkStock")).getDomAttribute("data-stock-num"));
          double price = Double.parseDouble(card.findElement(By.className("retailPrice")).getText().replaceAll(java.util.regex.Matcher.quoteReplacement("CAD $"), ""));
          existingCard.addPrice(price, concurrentPrice, condition, amountInStock, foiling, fetchDate, fetcherSystem);
        }
        //Special case if it's an Art Card
        else if(cardName.contains(" Art Card")) {
          condition = "Art Card";
          foiling = "Art Card";
          amountInStock = Integer.parseInt(card.findElement(By.className("hawkStock")).getDomAttribute("data-stock-num"));
          double price = Double.parseDouble(card.findElement(By.className("retailPrice")).getText().replaceAll(java.util.regex.Matcher.quoteReplacement("CAD $"), ""));
          System.out.println("Added to the database: " + price +"\t"+ amountInStock +"\t"+ condition +"\t"+ foiling +"\t"+ fetchDate);
          existingCard.addPrice(price, concurrentPrice, condition, amountInStock, foiling, fetchDate, fetcherSystem);
        }
        else {
          List<List<String>> radioTable = new ArrayList<List<String>>();
          //Search all the options that are available for that card, compile the result in a table
          //populate the 2d table
          List<WebElement> ListOfConditions = card.findElements(By.cssSelector("[data-variant-name=condition]"));
          List<WebElement> ListOfFoiling = card.findElements(By.cssSelector("[data-variant-name=finish]"));

          //Create two rows of array
          radioTable.add(new ArrayList<String>());
          radioTable.add(new ArrayList<String>());
          //Populate the first row with card's available conditions
          for (int i =0; i<ListOfConditions.size(); i++) {
            radioTable.get(0).add(ListOfConditions.get(i).getDomAttribute("value"));
          }

          //Populate the second row with card's available foilings
          for (int i =0; i<ListOfFoiling.size(); i++) {
            radioTable.get(1).add(ListOfFoiling.get(i).getDomAttribute("value"));
          }

          //for (List<String> a : radioTable) {
           // String str = "";
           // for (int i=0;i<a.size();i++) {
           //   str+=a.get(i)+"|";
           // }
          //  System.out.println(str);
          //}
          //find the card price currently displayed on the website
          List<WebElement> ListOfPrices = card.findElements(By.className("retailPrice"));
          List<WebElement> ListOfStockStatus = card.findElements(By.className("hawkStock"));
          //for (WebElement a: ListOfStockStatus) {
          //  System.out.println(a.getText());
          //}

          int i = 0;

          while (i < ListOfPrices.size()){
            for (int j=0; j<ListOfFoiling.size(); j++) {
              foiling = radioTable.get(1).get(j);
              for (int k=0;k<ListOfConditions.size();k++) {
                //Add the next price with the next combination of NM and Foil available for the card
                condition = radioTable.get(0).get(k);
                String strPrice = ListOfPrices.get(i).getText().trim();
                //System.out.println("Price: " + strPrice);
                double price = Double.parseDouble(strPrice.replaceAll(java.util.regex.Matcher.quoteReplacement("CAD $"), ""));
                //if (!ListOfStockStatus.get(i).getText().equals("Out of Stock")) {
                //There is some cards in stock
                //  amountInStock = Integer.parseInt(ListOfStockStatus.get(i).getText().replaceAll(" In Stock", ""));
                //}
                amountInStock = Integer.parseInt(ListOfStockStatus.get(i).getDomAttribute("data-stock-num"));


                System.out.println("Added to the database: " + price +"\t"+ amountInStock +"\t"+ condition +"\t"+ foiling +"\t"+ fetchDate);
                existingCard.addPrice(price, concurrentPrice, condition, amountInStock, foiling, fetchDate, fetcherSystem);
                i++;
              }
            }

          }
        }
      }
      success = true;
      driver.quit();

    }
    catch (Exception e) {
      System.out.println("Error: "+e);
      success = false;
      if (driver!=null) driver.quit();
    }
    return success;
  }
  }

class Reader
{
  autounique readerId;
}

class Price
{
	depend java.time.LocalDateTime;
	autounique priceId;
  double amount;
  double concurrentPrice;
  condition;
  int amountInStock;
  foiling;
  LocalDateTime fetchDate;
}


class CardDatabase
{
  autounique databaseId;
  1 -- 0..1 Reader;
  1 -- 0..1 Fetcher;
  1 -- 0..1 MainMenu;
  
  public void setCards(List<Card> list){
  	this.cards = list;
  }
  
}


