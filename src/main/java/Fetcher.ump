namespace com.MagicPrices.model;
class FetcherSystem
{
	depend java.time.LocalDateTime;
    autounique id;
  LocalDateTime currentDate=LocalDateTime.now();
  1 <@>- 0..1 MainMenu;
  1 <@>- * Fetcher;
  1 <@>- * Card;
  1 <@>- * Reader;
  1 <@>- * Price;
  1 <@>- 0..1 CardDatabase;
    public LocalDateTime updateCurrentDate()
  {
  	currentDate=LocalDateTime.now();
    return currentDate;
  }
}

class MainMenu
{
depend java.time.LocalDateTime;
  autounique mainId;
     dataPath="./";
   1-- 0..1 Reader;
   
}

class Card
{
depend java.time.LocalDateTime;
  String cardId;
    name;
category;
1 -- * Price;
    * -- 1 CardDatabase;
  0..1 -- 0..1 Fetcher;
public boolean setCardId(String aCardName, String aCategory){
    boolean wasSet = false;
    cardId = Card.convertToCardId(aCardName, aCategory);
    wasSet = true;
    return wasSet;
  }
  
  public static String convertToCardId(String aCardName, String aCategory){
  	return aCardName.toLowerCase().replaceAll(" ","")+"|"+aCategory.toLowerCase().replaceAll(" ","");
  }
  
}

class Fetcher
{
depend java.time.LocalDateTime;
depend com.MagicPrices.controller.CardDatabaseController;
depend java.util.ArrayList;
depend java.util.List;
depend java.util.concurrent.TimeUnit;
depend org.openqa.selenium.By;
depend org.openqa.selenium.WebDriver;
depend org.openqa.selenium.WebElement;
depend org.openqa.selenium.safari.SafariDriver;
  
  autounique fetcherId;
  LocalDateTime fetchDate;
  url;
  double conversionRateUSDToCAD;
 0..1 -- 1 MainMenu;
 
 
  public void fetchAll(){
      WebDriver driver = new SafariDriver();
    
    try {
      //driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
      driver.get(url);
      try {
        TimeUnit.SECONDS.sleep(1);
      } catch (InterruptedException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
      }

      //Extract information
      //System.out.println(driver.getPageSource());
      List<WebElement> ListOfCards = driver.findElements(By.xpath("//div[@class='hawk-results__item']"));
      
      for (WebElement card: ListOfCards) {
        System.out.println("Found a card! Now analyzing it");
        //System.out.println(card.getText());
        String cardName;
        String cardSet;
        double concurrentPrice=0;
        WebElement cardNameHTML = card.findElement(By.className("hawk-results__hawk-contentTitle"));
        cardName = cardNameHTML.getText().trim();
        WebElement cardSetHTML = card.findElement(By.className("hawk-results__hawk-contentSubtitle"));
        cardSet = cardSetHTML.getText().trim();

        Card existingCard = CardDatabaseController.findCardById(Card.convertToCardId(cardName, cardSet));
        if (existingCard ==null) {
          existingCard = new Card(Card.convertToCardId(cardName, cardSet), cardName, cardSet, cardDatabase, fetcherSystem);
        }
        
        List<List<Boolean>> radioTable = new ArrayList<List<Boolean>>();
        //Search all the options that are available for that card, compile the result in a table
        //populate the 2d table
        for (int i=0; i<=1; i++) {
          radioTable.add(new ArrayList<Boolean>());
          for (int j=0;j<=1;j++) {
            radioTable.get(i).add(false);
          }
        }
        try{
          card.findElement(By.cssSelector("[value=NM]"));
          radioTable.get(0).set(0, true);
        }
        catch(Exception e) {
        }
        try{
          card.findElement(By.cssSelector("[value=PL]"));
          radioTable.get(0).set(1, true);
        }
        catch(Exception e) {
        }
        try{
          card.findElement(By.cssSelector("[value=Non-Foil]"));
          radioTable.get(1).set(0, true);
        }
        catch(Exception e) {
        }
        try{
          card.findElement(By.cssSelector("[value=Foil]"));
          radioTable.get(1).set(1, true);
        }
        catch(Exception e) {
        }
        
        //for (List<Boolean> a : radioTable) {
        //  System.out.println(a.get(0)+"|"+a.get(1));
        //}
        
        //Combination of NM and Foil at the top-left table
        boolean isNM = true;
        boolean isFoil = false;
        //find the card price currently displayed on the website
        List<WebElement> ListOfPrices = card.findElements(By.className("hawkPrice"));
        List<WebElement> ListOfStockStatus = card.findElements(By.className("hawkStock"));
        //for (WebElement a: ListOfStockStatus) {
        //  System.out.println(a.getText());
        //}
        
        int i = 0;
        while (i < ListOfPrices.size()){
          for (int j=0; j<=1; j++) {
            for (int k=0;k<=1;k++) {
              //Add the next price if the combination of NM and Foil is available for the card
              if (radioTable.get(1).get(j) && radioTable.get(0).get(k)) {
                String strPrice = ListOfPrices.get(i).getText().trim();
                //System.out.println("Price: " + strPrice);
                double price = Double.parseDouble(strPrice.replaceAll(java.util.regex.Matcher.quoteReplacement("CAD $"), ""));
                boolean isInStock = !(ListOfStockStatus.get(i).getText().equals("Out of Stock"));


                System.out.println("Added to the database: " + price +"\t"+ isInStock +"\t"+ isNM +"\t"+ isFoil +"\t"+ fetchDate);
                existingCard.addPrice(price, concurrentPrice, isNM, isInStock, isFoil, fetchDate, fetcherSystem);
                
                i++;
                
              }
              //Change the combination to the next possible combination
              isNM = !isNM;
            }
            isFoil = !isFoil;
          }

        }
        }

    }
    catch (Exception e) {
      System.out.println("Error: "+e);
      driver.quit();
    }
    driver.quit();
  }

  }

class Reader
{
  autounique readerId;
}

class Price
{
	depend java.time.LocalDateTime;
	autounique priceId;
  double amount;
  double concurrentPrice;
  boolean isNM;
  boolean isInStock;
  boolean isFoil;
  LocalDateTime fetchDate;
}


class CardDatabase
{
  autounique databaseId;
  1 -- 0..1 Reader;
  1 -- 0..1 Fetcher;
  1 -- 0..1 MainMenu;
}


