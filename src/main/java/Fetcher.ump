namespace com.MagicPrices.model;
class FetcherSystem
{
	depend java.time.LocalDateTime;
    autounique id;
  LocalDateTime currentDate=LocalDateTime.now();
  1 <@>- 0..1 MainMenu;
  1 <@>- * Fetcher;
  1 <@>- * Card;
  1 <@>- * Reader;
  1 <@>- * Price;
  1 <@>- 0..1 CardDatabase;
    public LocalDateTime updateCurrentDate()
  {
  	currentDate=LocalDateTime.now();
    return currentDate;
  }
}

class MainMenu
{
depend java.time.LocalDateTime;
  autounique mainId;
     dataPath="./";
   1-- 0..1 Reader;
   
}



class Card
{
depend java.time.LocalDateTime;
depend org.openqa.selenium.WebElement;
depend org.openqa.selenium.By;
  cardId;
    name;
category;
1 -- * Price sorted {fetchDateString} ;
    * sorted {cardId} -- 1 CardDatabase;
  0..1 -- 0..1 Fetcher;
  
   public boolean setCardId(WebElement card){
    boolean wasSet = false;
    cardId = Card.convertToCardId(card);
    wasSet = true;
    return wasSet;
  }
  
   public static  String convertToCardId(WebElement card){
    return card.findElement(By.tagName("a")).getDomAttribute("href").replaceAll("https://www.facetofacegames.com/", "").replaceAll("/","");
  }

  
}

class Fetcher
{
depend java.time.Duration;
depend java.time.LocalDateTime;
depend com.MagicPrices.controller.CardDatabaseController;
depend java.util.ArrayList;
depend java.util.List;
depend org.openqa.selenium.By;
depend org.openqa.selenium.WebDriver;
depend org.openqa.selenium.WebElement;
depend org.openqa.selenium.support.ui.ExpectedConditions;
depend org.openqa.selenium.support.ui.WebDriverWait;
  
  autounique fetcherId;
  LocalDateTime fetchDate;
  url;
  double conversionRateUSDToCAD;
 0..1 -- 1 MainMenu;
 
 
   public boolean fetchAllPage(WebDriver driver){
    boolean success = false;
    try {
      
      //Extract information
      List<WebElement> ListOfCards = discoverPage(url,driver);

      for (WebElement card: ListOfCards) {
        System.out.println("Found a card! Now analyzing it");
        String cardName;
        String cardSet;
        double concurrentPrice=0;
        String condition;
        String foiling;
        int amountInStock = 0;
        WebElement cardNameHTML = card.findElement(By.className("hawk-results__hawk-contentTitle"));
        cardName = cardNameHTML.getText().trim();
        WebElement cardSetHTML = card.findElement(By.className("hawk-results__hawk-contentSubtitle"));
        cardSet = cardSetHTML.getText().trim();

        Card existingCard = CardDatabaseController.findCardById(Card.convertToCardId(card));
        if (existingCard ==null) {
          existingCard = new Card(Card.convertToCardId(card), cardName, cardSet, cardDatabase, fetcherSystem);
        }
        //Special case if the card is unique (scan)
        if (cardName.contains(" - Scan")){
          fetchSinglePrice(card, concurrentPrice, existingCard, "Scan");
        }
        //Special case if it's an Art Card
        else if(cardName.contains(" Art Card")) {
          fetchSinglePrice(card, concurrentPrice, existingCard, "Art Card");
        }
        else {
          List<List<String>> radioTable = new ArrayList<List<String>>();
          //Search all the pricing options that are available for that card, compile the result in two different lists
          List<WebElement> ListOfConditions = card.findElements(By.cssSelector("[data-variant-name=condition]"));
          List<WebElement> ListOfFoiling = card.findElements(By.cssSelector("[data-variant-name=finish]"));


          //Special case where there is only a single price for a card, no pricing option available
          if (ListOfConditions.size()<1||ListOfFoiling.size()<1) {
            fetchSinglePrice(card, concurrentPrice, existingCard, "N/A");
            success=true;
            return success;
          }
          
          //Create two rows of lists
          radioTable.add(new ArrayList<String>());
          radioTable.add(new ArrayList<String>());
          //Populate the first row with card's available conditions
          for (int i =0; i<ListOfConditions.size(); i++) {
            radioTable.get(0).add(ListOfConditions.get(i).getDomAttribute("value"));
          }

          //Populate the second row with card's available foilings
          for (int i =0; i<ListOfFoiling.size(); i++) {
            radioTable.get(1).add(ListOfFoiling.get(i).getDomAttribute("value"));
          }

          //find the list of card price and stock status currently on the page
          List<WebElement> ListOfPrices = card.findElements(By.className("retailPrice"));
          List<WebElement> ListOfStockStatus = card.findElements(By.className("hawkStock"));

          int i = 0;

          //Get the next available combination of foiling and condition and assign it to the next available price
          while (i < ListOfPrices.size()){
            for (int j=0; j<ListOfFoiling.size(); j++) {
              foiling = radioTable.get(1).get(j);
              for (int k=0;k<ListOfConditions.size();k++) {
                //Add the next price with the next combination of NM and Foil available for the card
                condition = radioTable.get(0).get(k);
                String strPrice = ListOfPrices.get(i).getText().trim();
                double price = Double.parseDouble(strPrice.replaceAll(java.util.regex.Matcher.quoteReplacement("CAD $"), "").replaceAll(",", ""));
                amountInStock = Integer.parseInt(ListOfStockStatus.get(i).getDomAttribute("data-stock-num"));
                existingCard.addPrice(price, concurrentPrice, condition, amountInStock, foiling, fetchDate, fetcherSystem);
                i++;
              }
            }

          }
        }
      }
      success = true;
    }
    catch (Exception e) {
      System.out.println("Error: "+e);
      success = false;
    }
    return success;
  }

  /**
   * Method to get the list of cards as WebElement from a search result
   * @param url - url must be derived from a search result page
   * @param driver - Instance of the current WebDriver
   * @return - List of WebElement of all cards found in the url content
   */
   public List<WebElement> discoverPage(String url, WebDriver driver){
    driver.get(url);
      WebDriverWait driverWait = new WebDriverWait(driver, Duration.ofSeconds(10));
      driverWait.until(ExpectedConditions.   presenceOfElementLocated(By.className("retailPrice")));
     List<WebElement> listOfCards = driver.findElements(By.xpath("//div[@class='hawk-results__item']"));
     return listOfCards;
  }
   
   /**
    * Helper method to deal with card with only one pricing option
    * @return - true if successful, false if there is a failure
    */
   private boolean fetchSinglePrice(WebElement card, double concurrentPrice, Card existingCard, String fillerText) {
     boolean success = false;
     String condition = fillerText;
     String foiling = fillerText;
     int amountInStock = Integer.parseInt(card.findElement(By.className("hawkStock")).getDomAttribute("data-stock-num"));
     double price = Double.parseDouble(card.findElement(By.className("retailPrice")).getText().replaceAll(java.util.regex.Matcher.quoteReplacement("CAD $"), "").replaceAll(",", ""));
     existingCard.addPrice(price, concurrentPrice, condition, amountInStock, foiling, fetchDate, fetcherSystem);
     success = true;
     return success;
   }
  }

class Reader
{
  autounique readerId;
}

class Price
{
	depend java.time.LocalDateTime;
	autounique priceId;
  double amount;
  double concurrentPrice;
  condition;
  int amountInStock;
  foiling;
  LocalDateTime fetchDate;
  fetchDateString = fetchDate.toString();
}


class CardDatabase
{
  autounique databaseId;
  1 -- 0..1 Reader;
  1 -- 0..1 Fetcher;
  1 -- 0..1 MainMenu;
  
  public void setCards(List<Card> list){
  	this.cards = list;
  }
  
  
}


