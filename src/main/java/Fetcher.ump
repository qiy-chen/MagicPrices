namespace com.MagicPrices.model;
class FetcherSystem
{
	depend java.time.LocalDateTime;
    autounique id;
  LocalDateTime currentDate=LocalDateTime.now();
  1 <@>- 0..1 MainMenu;
  1 <@>- * Fetcher;
  1 <@>- * Card;
  1 <@>- * Reader;
  1 <@>- * Price;
  1 <@>- 0..1 CardDatabase;
    public LocalDateTime updateCurrentDate()
  {
  	currentDate=LocalDateTime.now();
    return currentDate;
  }
}

class MainMenu
{
depend java.time.LocalDateTime;
  autounique mainId;
     dataPath="./";
   1-- 0..1 Reader;
   
}

class Card
{
depend java.time.LocalDateTime;
  String cardId;
    name;
category;
1 -- * Price;
    * -- 1 CardDatabase;
  0..1 -- 0..1 Fetcher;
public boolean setCardId(String aCardName, String aCategory){
    boolean wasSet = false;
    cardId = Card.convertToCardId(aCardName, aCategory);
    wasSet = true;
    return wasSet;
  }
  
  public static String convertToCardId(String aCardName, String aCategory){
  	return aCardName.toLowerCase().replaceAll(" ","")+aCategory.toLowerCase();
  }
  
}

class Fetcher
{
 depend java.time.LocalDateTime;
 depend com.gargoylesoftware.htmlunit.BrowserVersion;
depend  com.gargoylesoftware.htmlunit.WebClient;
depend  com.gargoylesoftware.htmlunit.html.DomElement;
depend  com.gargoylesoftware.htmlunit.html.HtmlPage;
depend java.io.IOException;
  depend java.util.List;
  depend com.gargoylesoftware.htmlunit.javascript.SilentJavaScriptErrorListener;
  
  autounique fetcherId;
  LocalDateTime fetchDate;
  url;
  double conversionRateUSDToCAD;
 0..1 -- 1 MainMenu;
 
 
   public void fetchAll(){
    WebClient webClient = new WebClient(BrowserVersion.CHROME);
    //Shutdown some error messages
    webClient.getOptions().setCssEnabled(false);
    webClient.getOptions().setThrowExceptionOnFailingStatusCode(false);
    webClient.getOptions().setThrowExceptionOnScriptError(false);
    webClient.getOptions().setPrintContentOnFailingStatusCode(false);

    try {
       HtmlPage page = webClient.getPage(url);

       webClient.getCurrentWindow().getJobManager().removeAllJobs();
       webClient.close();
       //Extract information
       List<DomElement> ListOfCards = page.getByXPath("//div[@class='hawk-results__item-name']");
       for (DomElement card: ListOfCards) {
         String cardName;
         String cardSet;
         double concurrentPrice=0;
         DomElement cardNameHTML = card.getFirstByXPath("//h4[@class='hawk-results__hawk-contentTitle']");
         cardName = cardNameHTML.asNormalizedText();
         DomElement cardSetHTML = card.getFirstByXPath("//p[@class='hawk-results__hawk-contentSubtitle']");
         cardSet = cardSetHTML.asNormalizedText();
         
         Card cardObject = new Card(Card.convertToCardId(cardName, cardSet), cardName, cardSet, cardDatabase, fetcherSystem);
         
         //find the card price currently displayed on the website
         List<DomElement> ListOfPrices = card.getByXPath("//span[@class='retailPrice hawkPrice']");
         List<DomElement> ListOfStockStatus = card.getByXPath("//span[@class='hawkStock']");
         for (int i=0; i<=3; i++) {
           String strPrice = ListOfPrices.get(i).asNormalizedText();
           double price = Double.parseDouble(strPrice.trim().replaceAll("CAD $ ", ""));
           boolean isInStock = !(ListOfStockStatus.get(i).asNormalizedText() == "Out of Stock");
           
           boolean isNM = (i == 0 || i == 3);
           boolean isFoil = (i >= 2);
           cardObject.addPrice(price, concurrentPrice, isNM, isInStock, isFoil, fetchDate, fetcherSystem);
           
         }
         
         int index = cardDatabase.indexOfCard(cardObject);
         if (index > -1) {
           Card existingCard = cardDatabase.getCard(index);
           //Transfer all prices from fetched card to existing card
           while (cardObject.hasPrices()) {
             Price price = cardObject.getPrice(0);
             existingCard.addPrice(price);
             cardObject.removePrice(price);
           }
         }
         else cardDatabase.addCard(cardObject);
         
       }
       

    } catch (IOException e) {
       System.out.println("An error occurred: " + e);
       webClient.close();
    }
  }

  }

class Reader
{
  autounique readerId;
}

class Price
{
	depend java.time.LocalDateTime;
	autounique priceId;
  double amount;
  double concurrentPrice;
  boolean isNM;
  boolean isInStock;
  boolean isFoil;
  LocalDateTime fetchDate;
}


class CardDatabase
{
  autounique databaseId;
  1 -- 0..1 Reader;
  1 -- 0..1 Fetcher;
  1 -- 0..1 MainMenu;
}


